#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IM.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="IDSDB")]
	public partial class IDSDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompanyAddress(CompanyAddress instance);
    partial void UpdateCompanyAddress(CompanyAddress instance);
    partial void DeleteCompanyAddress(CompanyAddress instance);
    partial void InsertCompanyConfiguration(CompanyConfiguration instance);
    partial void UpdateCompanyConfiguration(CompanyConfiguration instance);
    partial void DeleteCompanyConfiguration(CompanyConfiguration instance);
    partial void InsertCompanyInfo(CompanyInfo instance);
    partial void UpdateCompanyInfo(CompanyInfo instance);
    partial void DeleteCompanyInfo(CompanyInfo instance);
    partial void InsertCompanyTransactionType(CompanyTransactionType instance);
    partial void UpdateCompanyTransactionType(CompanyTransactionType instance);
    partial void DeleteCompanyTransactionType(CompanyTransactionType instance);
    partial void InsertRegistrationPaymentType(RegistrationPaymentType instance);
    partial void UpdateRegistrationPaymentType(RegistrationPaymentType instance);
    partial void DeleteRegistrationPaymentType(RegistrationPaymentType instance);
    partial void InsertSystemUser(SystemUser instance);
    partial void UpdateSystemUser(SystemUser instance);
    partial void DeleteSystemUser(SystemUser instance);
    partial void InsertUserBalance(UserBalance instance);
    partial void UpdateUserBalance(UserBalance instance);
    partial void DeleteUserBalance(UserBalance instance);
    partial void InsertUserDailyLinkClick(UserDailyLinkClick instance);
    partial void UpdateUserDailyLinkClick(UserDailyLinkClick instance);
    partial void DeleteUserDailyLinkClick(UserDailyLinkClick instance);
    partial void InsertUserKeyInfo(UserKeyInfo instance);
    partial void UpdateUserKeyInfo(UserKeyInfo instance);
    partial void DeleteUserKeyInfo(UserKeyInfo instance);
    partial void InsertUserMoneyTransfer(UserMoneyTransfer instance);
    partial void UpdateUserMoneyTransfer(UserMoneyTransfer instance);
    partial void DeleteUserMoneyTransfer(UserMoneyTransfer instance);
    partial void InsertUserPaidToCompany(UserPaidToCompany instance);
    partial void UpdateUserPaidToCompany(UserPaidToCompany instance);
    partial void DeleteUserPaidToCompany(UserPaidToCompany instance);
    partial void InsertUserTransactionHistory(UserTransactionHistory instance);
    partial void UpdateUserTransactionHistory(UserTransactionHistory instance);
    partial void DeleteUserTransactionHistory(UserTransactionHistory instance);
    partial void InsertUserTransactionType(UserTransactionType instance);
    partial void UpdateUserTransactionType(UserTransactionType instance);
    partial void DeleteUserTransactionType(UserTransactionType instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    partial void InsertAdvertise(Advertise instance);
    partial void UpdateAdvertise(Advertise instance);
    partial void DeleteAdvertise(Advertise instance);
    partial void InsertUserWithdrawRequest(UserWithdrawRequest instance);
    partial void UpdateUserWithdrawRequest(UserWithdrawRequest instance);
    partial void DeleteUserWithdrawRequest(UserWithdrawRequest instance);
    #endregion
		
		public IDSDBDataContext() : 
				base(global::IM.DAL.Properties.Settings.Default.IDSDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public IDSDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IDSDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IDSDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public IDSDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CompanyAddress> CompanyAddresses
		{
			get
			{
				return this.GetTable<CompanyAddress>();
			}
		}
		
		public System.Data.Linq.Table<CompanyConfiguration> CompanyConfigurations
		{
			get
			{
				return this.GetTable<CompanyConfiguration>();
			}
		}
		
		public System.Data.Linq.Table<CompanyInfo> CompanyInfos
		{
			get
			{
				return this.GetTable<CompanyInfo>();
			}
		}
		
		public System.Data.Linq.Table<CompanyTransactionType> CompanyTransactionTypes
		{
			get
			{
				return this.GetTable<CompanyTransactionType>();
			}
		}
		
		public System.Data.Linq.Table<RegistrationPaymentType> RegistrationPaymentTypes
		{
			get
			{
				return this.GetTable<RegistrationPaymentType>();
			}
		}
		
		public System.Data.Linq.Table<SystemUser> SystemUsers
		{
			get
			{
				return this.GetTable<SystemUser>();
			}
		}
		
		public System.Data.Linq.Table<UserBalance> UserBalances
		{
			get
			{
				return this.GetTable<UserBalance>();
			}
		}
		
		public System.Data.Linq.Table<UserDailyLinkClick> UserDailyLinkClicks
		{
			get
			{
				return this.GetTable<UserDailyLinkClick>();
			}
		}
		
		public System.Data.Linq.Table<UserKeyInfo> UserKeyInfos
		{
			get
			{
				return this.GetTable<UserKeyInfo>();
			}
		}
		
		public System.Data.Linq.Table<UserMoneyTransfer> UserMoneyTransfers
		{
			get
			{
				return this.GetTable<UserMoneyTransfer>();
			}
		}
		
		public System.Data.Linq.Table<UserPaidToCompany> UserPaidToCompanies
		{
			get
			{
				return this.GetTable<UserPaidToCompany>();
			}
		}
		
		public System.Data.Linq.Table<UserTransactionHistory> UserTransactionHistories
		{
			get
			{
				return this.GetTable<UserTransactionHistory>();
			}
		}
		
		public System.Data.Linq.Table<UserTransactionType> UserTransactionTypes
		{
			get
			{
				return this.GetTable<UserTransactionType>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
		
		public System.Data.Linq.Table<Advertise> Advertises
		{
			get
			{
				return this.GetTable<Advertise>();
			}
		}
		
		public System.Data.Linq.Table<UserWithdrawRequest> UserWithdrawRequests
		{
			get
			{
				return this.GetTable<UserWithdrawRequest>();
			}
		}
		
		[Function(Name="dbo.UserDailyIncome")]
		public ISingleResult<UserDailyIncomeResult> UserDailyIncome([Parameter(Name="Date", DbType="DateTime")] System.Nullable<System.DateTime> date, [Parameter(Name="UserID", DbType="BigInt")] System.Nullable<long> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date, userID);
			return ((ISingleResult<UserDailyIncomeResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.PostRegistrationProcess")]
		public int PostRegistrationProcess([Parameter(DbType="BigInt")] System.Nullable<long> systemUserID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), systemUserID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_InsertUserTransactionHistory")]
		public int sp_InsertUserTransactionHistory([Parameter(DbType="BigInt")] System.Nullable<long> userId, [Parameter(DbType="Int")] System.Nullable<int> transType, [Parameter(Name="Amount", DbType="Money")] System.Nullable<decimal> amount, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> date, [Parameter(DbType="NVarChar(500)")] string description, [Parameter(DbType="Money")] System.Nullable<decimal> sponsorAmount, [Parameter(DbType="Money")] System.Nullable<decimal> taxAmount, [Parameter(DbType="Money")] System.Nullable<decimal> actualAmount, [Parameter(DbType="NVarChar(50)")] string transactionKey, [Parameter(DbType="Int")] System.Nullable<int> status)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, transType, amount, date, description, sponsorAmount, taxAmount, actualAmount, transactionKey, status);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_InsertUserTransfer")]
		public int sp_InsertUserTransfer([Parameter(DbType="BigInt")] System.Nullable<long> fromUserId, [Parameter(DbType="BigInt")] System.Nullable<long> toUserId, [Parameter(Name="Amount", DbType="Money")] System.Nullable<decimal> amount, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> date, [Parameter(DbType="NVarChar(50)")] string transactionKey)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fromUserId, toUserId, amount, date, transactionKey);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_UpdateUserBlance")]
		public int sp_UpdateUserBlance([Parameter(DbType="BigInt")] System.Nullable<long> userId, [Parameter(DbType="Money")] System.Nullable<decimal> amount)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, amount);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.CompanyAddress")]
	public partial class CompanyAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IID;
		
		private long _CompanyID;
		
		private string _Address;
		
		private string _Phone;
		
		private EntityRef<CompanyInfo> _CompanyInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(long value);
    partial void OnIIDChanged();
    partial void OnCompanyIDChanging(long value);
    partial void OnCompanyIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public CompanyAddress()
		{
			this._CompanyInfo = default(EntityRef<CompanyInfo>);
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt NOT NULL")]
		public long CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._CompanyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Association(Name="CompanyInfo_CompanyAddress", Storage="_CompanyInfo", ThisKey="CompanyID", IsForeignKey=true)]
		public CompanyInfo CompanyInfo
		{
			get
			{
				return this._CompanyInfo.Entity;
			}
			set
			{
				CompanyInfo previousValue = this._CompanyInfo.Entity;
				if (((previousValue != value) 
							|| (this._CompanyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyInfo.Entity = null;
						previousValue.CompanyAddresses.Remove(this);
					}
					this._CompanyInfo.Entity = value;
					if ((value != null))
					{
						value.CompanyAddresses.Add(this);
						this._CompanyID = value.IID;
					}
					else
					{
						this._CompanyID = default(long);
					}
					this.SendPropertyChanged("CompanyInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CompanyConfiguration")]
	public partial class CompanyConfiguration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IID;
		
		private decimal _RegistrationAmount;
		
		private long _CompanyID;
		
		private decimal _RegistrationSponsorAmount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(long value);
    partial void OnIIDChanged();
    partial void OnRegistrationAmountChanging(decimal value);
    partial void OnRegistrationAmountChanged();
    partial void OnCompanyIDChanging(long value);
    partial void OnCompanyIDChanged();
    partial void OnRegistrationSponsorAmountChanging(decimal value);
    partial void OnRegistrationSponsorAmountChanged();
    #endregion
		
		public CompanyConfiguration()
		{
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_RegistrationAmount", DbType="Money NOT NULL")]
		public decimal RegistrationAmount
		{
			get
			{
				return this._RegistrationAmount;
			}
			set
			{
				if ((this._RegistrationAmount != value))
				{
					this.OnRegistrationAmountChanging(value);
					this.SendPropertyChanging();
					this._RegistrationAmount = value;
					this.SendPropertyChanged("RegistrationAmount");
					this.OnRegistrationAmountChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt NOT NULL")]
		public long CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_RegistrationSponsorAmount", DbType="Money NOT NULL")]
		public decimal RegistrationSponsorAmount
		{
			get
			{
				return this._RegistrationSponsorAmount;
			}
			set
			{
				if ((this._RegistrationSponsorAmount != value))
				{
					this.OnRegistrationSponsorAmountChanging(value);
					this.SendPropertyChanging();
					this._RegistrationSponsorAmount = value;
					this.SendPropertyChanged("RegistrationSponsorAmount");
					this.OnRegistrationSponsorAmountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CompanyInfo")]
	public partial class CompanyInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IID;
		
		private string _Name;
		
		private string _Description;
		
		private string _MainPhone;
		
		private EntitySet<CompanyAddress> _CompanyAddresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(long value);
    partial void OnIIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMainPhoneChanging(string value);
    partial void OnMainPhoneChanged();
    #endregion
		
		public CompanyInfo()
		{
			this._CompanyAddresses = new EntitySet<CompanyAddress>(new Action<CompanyAddress>(this.attach_CompanyAddresses), new Action<CompanyAddress>(this.detach_CompanyAddresses));
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MainPhone", DbType="NVarChar(50)")]
		public string MainPhone
		{
			get
			{
				return this._MainPhone;
			}
			set
			{
				if ((this._MainPhone != value))
				{
					this.OnMainPhoneChanging(value);
					this.SendPropertyChanging();
					this._MainPhone = value;
					this.SendPropertyChanged("MainPhone");
					this.OnMainPhoneChanged();
				}
			}
		}
		
		[Association(Name="CompanyInfo_CompanyAddress", Storage="_CompanyAddresses", OtherKey="CompanyID")]
		public EntitySet<CompanyAddress> CompanyAddresses
		{
			get
			{
				return this._CompanyAddresses;
			}
			set
			{
				this._CompanyAddresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyAddresses(CompanyAddress entity)
		{
			this.SendPropertyChanging();
			entity.CompanyInfo = this;
		}
		
		private void detach_CompanyAddresses(CompanyAddress entity)
		{
			this.SendPropertyChanging();
			entity.CompanyInfo = null;
		}
	}
	
	[Table(Name="dbo.CompanyTransactionType")]
	public partial class CompanyTransactionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IID;
		
		private string _Name;
		
		private EntitySet<UserPaidToCompany> _UserPaidToCompanies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(int value);
    partial void OnIIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CompanyTransactionType()
		{
			this._UserPaidToCompanies = new EntitySet<UserPaidToCompany>(new Action<UserPaidToCompany>(this.attach_UserPaidToCompanies), new Action<UserPaidToCompany>(this.detach_UserPaidToCompanies));
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="CompanyTransactionType_UserPaidToCompany", Storage="_UserPaidToCompanies", OtherKey="CompanyTransactionTypeID")]
		public EntitySet<UserPaidToCompany> UserPaidToCompanies
		{
			get
			{
				return this._UserPaidToCompanies;
			}
			set
			{
				this._UserPaidToCompanies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPaidToCompanies(UserPaidToCompany entity)
		{
			this.SendPropertyChanging();
			entity.CompanyTransactionType = this;
		}
		
		private void detach_UserPaidToCompanies(UserPaidToCompany entity)
		{
			this.SendPropertyChanging();
			entity.CompanyTransactionType = null;
		}
	}
	
	[Table(Name="dbo.RegistrationPaymentType")]
	public partial class RegistrationPaymentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IID;
		
		private string _Name;
		
		private EntitySet<SystemUser> _SystemUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(int value);
    partial void OnIIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public RegistrationPaymentType()
		{
			this._SystemUsers = new EntitySet<SystemUser>(new Action<SystemUser>(this.attach_SystemUsers), new Action<SystemUser>(this.detach_SystemUsers));
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="RegistrationPaymentType_SystemUser", Storage="_SystemUsers", OtherKey="RegistrationPaymentTypeID")]
		public EntitySet<SystemUser> SystemUsers
		{
			get
			{
				return this._SystemUsers;
			}
			set
			{
				this._SystemUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.RegistrationPaymentType = this;
		}
		
		private void detach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.RegistrationPaymentType = null;
		}
	}
	
	[Table(Name="dbo.SystemUser")]
	public partial class SystemUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IID;
		
		private string _UserName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.DateTime _DOB;
		
		private string _Email;
		
		private string _ContactNo;
		
		private string _Address;
		
		private System.Guid _AspUserID;
		
		private System.Nullable<long> _AthunticationID;
		
		private int _TypeID;
		
		private System.Nullable<long> _LeftHandID;
		
		private System.Nullable<long> _RightHandID;
		
		private System.Nullable<long> _SponsorID;
		
		private string _UserDesplayID;
		
		private System.Nullable<int> _RegistrationPaymentTypeID;
		
		private int _IsRemoved;
		
		private long _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<long> _ParentID;
		
		private int _Status;
		
		private EntitySet<SystemUser> _SystemUsers;
		
		private EntitySet<SystemUser> _SystemUsers1;
		
		private EntitySet<SystemUser> _SystemUsers2;
		
		private EntitySet<SystemUser> _SystemUsers3;
		
		private EntitySet<UserBalance> _UserBalances;
		
		private EntitySet<UserDailyLinkClick> _UserDailyLinkClicks;
		
		private EntitySet<UserMoneyTransfer> _UserMoneyTransfers;
		
		private EntitySet<UserMoneyTransfer> _UserMoneyTransfers1;
		
		private EntitySet<UserPaidToCompany> _UserPaidToCompanies;
		
		private EntitySet<UserTransactionHistory> _UserTransactionHistories;
		
		private EntitySet<UserTransactionHistory> _UserTransactionHistories1;
		
		private EntitySet<UserWithdrawRequest> _UserWithdrawRequests;
		
		private EntityRef<RegistrationPaymentType> _RegistrationPaymentType;
		
		private EntityRef<SystemUser> _SystemUser1;
		
		private EntityRef<SystemUser> _SystemUser2;
		
		private EntityRef<SystemUser> _SystemUser3;
		
		private EntityRef<SystemUser> _SystemUser4;
		
		private EntityRef<UserKeyInfo> _UserKeyInfo;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(long value);
    partial void OnIIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnContactNoChanging(string value);
    partial void OnContactNoChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAspUserIDChanging(System.Guid value);
    partial void OnAspUserIDChanged();
    partial void OnAthunticationIDChanging(System.Nullable<long> value);
    partial void OnAthunticationIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnLeftHandIDChanging(System.Nullable<long> value);
    partial void OnLeftHandIDChanged();
    partial void OnRightHandIDChanging(System.Nullable<long> value);
    partial void OnRightHandIDChanged();
    partial void OnSponsorIDChanging(System.Nullable<long> value);
    partial void OnSponsorIDChanged();
    partial void OnUserDesplayIDChanging(string value);
    partial void OnUserDesplayIDChanged();
    partial void OnRegistrationPaymentTypeIDChanging(System.Nullable<int> value);
    partial void OnRegistrationPaymentTypeIDChanged();
    partial void OnIsRemovedChanging(int value);
    partial void OnIsRemovedChanged();
    partial void OnCreatedByChanging(long value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnParentIDChanging(System.Nullable<long> value);
    partial void OnParentIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public SystemUser()
		{
			this._SystemUsers = new EntitySet<SystemUser>(new Action<SystemUser>(this.attach_SystemUsers), new Action<SystemUser>(this.detach_SystemUsers));
			this._SystemUsers1 = new EntitySet<SystemUser>(new Action<SystemUser>(this.attach_SystemUsers1), new Action<SystemUser>(this.detach_SystemUsers1));
			this._SystemUsers2 = new EntitySet<SystemUser>(new Action<SystemUser>(this.attach_SystemUsers2), new Action<SystemUser>(this.detach_SystemUsers2));
			this._SystemUsers3 = new EntitySet<SystemUser>(new Action<SystemUser>(this.attach_SystemUsers3), new Action<SystemUser>(this.detach_SystemUsers3));
			this._UserBalances = new EntitySet<UserBalance>(new Action<UserBalance>(this.attach_UserBalances), new Action<UserBalance>(this.detach_UserBalances));
			this._UserDailyLinkClicks = new EntitySet<UserDailyLinkClick>(new Action<UserDailyLinkClick>(this.attach_UserDailyLinkClicks), new Action<UserDailyLinkClick>(this.detach_UserDailyLinkClicks));
			this._UserMoneyTransfers = new EntitySet<UserMoneyTransfer>(new Action<UserMoneyTransfer>(this.attach_UserMoneyTransfers), new Action<UserMoneyTransfer>(this.detach_UserMoneyTransfers));
			this._UserMoneyTransfers1 = new EntitySet<UserMoneyTransfer>(new Action<UserMoneyTransfer>(this.attach_UserMoneyTransfers1), new Action<UserMoneyTransfer>(this.detach_UserMoneyTransfers1));
			this._UserPaidToCompanies = new EntitySet<UserPaidToCompany>(new Action<UserPaidToCompany>(this.attach_UserPaidToCompanies), new Action<UserPaidToCompany>(this.detach_UserPaidToCompanies));
			this._UserTransactionHistories = new EntitySet<UserTransactionHistory>(new Action<UserTransactionHistory>(this.attach_UserTransactionHistories), new Action<UserTransactionHistory>(this.detach_UserTransactionHistories));
			this._UserTransactionHistories1 = new EntitySet<UserTransactionHistory>(new Action<UserTransactionHistory>(this.attach_UserTransactionHistories1), new Action<UserTransactionHistory>(this.detach_UserTransactionHistories1));
			this._UserWithdrawRequests = new EntitySet<UserWithdrawRequest>(new Action<UserWithdrawRequest>(this.attach_UserWithdrawRequests), new Action<UserWithdrawRequest>(this.detach_UserWithdrawRequests));
			this._RegistrationPaymentType = default(EntityRef<RegistrationPaymentType>);
			this._SystemUser1 = default(EntityRef<SystemUser>);
			this._SystemUser2 = default(EntityRef<SystemUser>);
			this._SystemUser3 = default(EntityRef<SystemUser>);
			this._SystemUser4 = default(EntityRef<SystemUser>);
			this._UserKeyInfo = default(EntityRef<UserKeyInfo>);
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_DOB", DbType="DateTime NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(250)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_ContactNo", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_AspUserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AspUserID
		{
			get
			{
				return this._AspUserID;
			}
			set
			{
				if ((this._AspUserID != value))
				{
					this.OnAspUserIDChanging(value);
					this.SendPropertyChanging();
					this._AspUserID = value;
					this.SendPropertyChanged("AspUserID");
					this.OnAspUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_AthunticationID", DbType="BigInt")]
		public System.Nullable<long> AthunticationID
		{
			get
			{
				return this._AthunticationID;
			}
			set
			{
				if ((this._AthunticationID != value))
				{
					if (this._UserKeyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAthunticationIDChanging(value);
					this.SendPropertyChanging();
					this._AthunticationID = value;
					this.SendPropertyChanged("AthunticationID");
					this.OnAthunticationIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_LeftHandID", DbType="BigInt")]
		public System.Nullable<long> LeftHandID
		{
			get
			{
				return this._LeftHandID;
			}
			set
			{
				if ((this._LeftHandID != value))
				{
					if (this._SystemUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeftHandIDChanging(value);
					this.SendPropertyChanging();
					this._LeftHandID = value;
					this.SendPropertyChanged("LeftHandID");
					this.OnLeftHandIDChanged();
				}
			}
		}
		
		[Column(Storage="_RightHandID", DbType="BigInt")]
		public System.Nullable<long> RightHandID
		{
			get
			{
				return this._RightHandID;
			}
			set
			{
				if ((this._RightHandID != value))
				{
					if (this._SystemUser2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRightHandIDChanging(value);
					this.SendPropertyChanging();
					this._RightHandID = value;
					this.SendPropertyChanged("RightHandID");
					this.OnRightHandIDChanged();
				}
			}
		}
		
		[Column(Storage="_SponsorID", DbType="BigInt")]
		public System.Nullable<long> SponsorID
		{
			get
			{
				return this._SponsorID;
			}
			set
			{
				if ((this._SponsorID != value))
				{
					if (this._SystemUser3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSponsorIDChanging(value);
					this.SendPropertyChanging();
					this._SponsorID = value;
					this.SendPropertyChanged("SponsorID");
					this.OnSponsorIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserDesplayID", DbType="NVarChar(100)")]
		public string UserDesplayID
		{
			get
			{
				return this._UserDesplayID;
			}
			set
			{
				if ((this._UserDesplayID != value))
				{
					this.OnUserDesplayIDChanging(value);
					this.SendPropertyChanging();
					this._UserDesplayID = value;
					this.SendPropertyChanged("UserDesplayID");
					this.OnUserDesplayIDChanged();
				}
			}
		}
		
		[Column(Storage="_RegistrationPaymentTypeID", DbType="Int")]
		public System.Nullable<int> RegistrationPaymentTypeID
		{
			get
			{
				return this._RegistrationPaymentTypeID;
			}
			set
			{
				if ((this._RegistrationPaymentTypeID != value))
				{
					if (this._RegistrationPaymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegistrationPaymentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RegistrationPaymentTypeID = value;
					this.SendPropertyChanged("RegistrationPaymentTypeID");
					this.OnRegistrationPaymentTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsRemoved", DbType="Int NOT NULL")]
		public int IsRemoved
		{
			get
			{
				return this._IsRemoved;
			}
			set
			{
				if ((this._IsRemoved != value))
				{
					this.OnIsRemovedChanging(value);
					this.SendPropertyChanging();
					this._IsRemoved = value;
					this.SendPropertyChanged("IsRemoved");
					this.OnIsRemovedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="BigInt NOT NULL")]
		public long CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="BigInt")]
		public System.Nullable<long> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._SystemUser4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="SystemUser_SystemUser", Storage="_SystemUsers", OtherKey="LeftHandID")]
		public EntitySet<SystemUser> SystemUsers
		{
			get
			{
				return this._SystemUsers;
			}
			set
			{
				this._SystemUsers.Assign(value);
			}
		}
		
		[Association(Name="SystemUser_SystemUser1", Storage="_SystemUsers1", OtherKey="RightHandID")]
		public EntitySet<SystemUser> SystemUsers1
		{
			get
			{
				return this._SystemUsers1;
			}
			set
			{
				this._SystemUsers1.Assign(value);
			}
		}
		
		[Association(Name="SystemUser_SystemUser2", Storage="_SystemUsers2", OtherKey="SponsorID")]
		public EntitySet<SystemUser> SystemUsers2
		{
			get
			{
				return this._SystemUsers2;
			}
			set
			{
				this._SystemUsers2.Assign(value);
			}
		}
		
		[Association(Name="SystemUser_SystemUser3", Storage="_SystemUsers3", OtherKey="ParentID")]
		public EntitySet<SystemUser> SystemUsers3
		{
			get
			{
				return this._SystemUsers3;
			}
			set
			{
				this._SystemUsers3.Assign(value);
			}
		}
		
		[Association(Name="SystemUser_UserBalance", Storage="_UserBalances", OtherKey="UserID")]
		public EntitySet<UserBalance> UserBalances
		{
			get
			{
				return this._UserBalances;
			}
			set
			{
				this._UserBalances.Assign(value);
			}
		}
		
		[Association(Name="SystemUser_UserDailyLinkClick", Storage="_UserDailyLinkClicks", OtherKey="UserID")]
		public EntitySet<UserDailyLinkClick> UserDailyLinkClicks
		{
			get
			{
				return this._UserDailyLinkClicks;
			}
			set
			{
				this._UserDailyLinkClicks.Assign(value);
			}
		}
		
		[Association(Name="SystemUser_UserMoneyTransfer", Storage="_UserMoneyTransfers", OtherKey="FromUser")]
		public EntitySet<UserMoneyTransfer> UserMoneyTransfers
		{
			get
			{
				return this._UserMoneyTransfers;
			}
			set
			{
				this._UserMoneyTransfers.Assign(value);
			}
		}
		
		[Association(Name="SystemUser_UserMoneyTransfer1", Storage="_UserMoneyTransfers1", OtherKey="ToUser")]
		public EntitySet<UserMoneyTransfer> UserMoneyTransfers1
		{
			get
			{
				return this._UserMoneyTransfers1;
			}
			set
			{
				this._UserMoneyTransfers1.Assign(value);
			}
		}
		
		[Association(Name="SystemUser_UserPaidToCompany", Storage="_UserPaidToCompanies", OtherKey="UserID")]
		public EntitySet<UserPaidToCompany> UserPaidToCompanies
		{
			get
			{
				return this._UserPaidToCompanies;
			}
			set
			{
				this._UserPaidToCompanies.Assign(value);
			}
		}
		
		[Association(Name="SystemUser_UserTransactionHistory", Storage="_UserTransactionHistories", OtherKey="UserID")]
		public EntitySet<UserTransactionHistory> UserTransactionHistories
		{
			get
			{
				return this._UserTransactionHistories;
			}
			set
			{
				this._UserTransactionHistories.Assign(value);
			}
		}
		
		[Association(Name="SystemUser_UserTransactionHistory1", Storage="_UserTransactionHistories1", OtherKey="FromUser")]
		public EntitySet<UserTransactionHistory> UserTransactionHistories1
		{
			get
			{
				return this._UserTransactionHistories1;
			}
			set
			{
				this._UserTransactionHistories1.Assign(value);
			}
		}
		
		[Association(Name="SystemUser_UserWithdrawRequest", Storage="_UserWithdrawRequests", OtherKey="UserID")]
		public EntitySet<UserWithdrawRequest> UserWithdrawRequests
		{
			get
			{
				return this._UserWithdrawRequests;
			}
			set
			{
				this._UserWithdrawRequests.Assign(value);
			}
		}
		
		[Association(Name="RegistrationPaymentType_SystemUser", Storage="_RegistrationPaymentType", ThisKey="RegistrationPaymentTypeID", IsForeignKey=true)]
		public RegistrationPaymentType RegistrationPaymentType
		{
			get
			{
				return this._RegistrationPaymentType.Entity;
			}
			set
			{
				RegistrationPaymentType previousValue = this._RegistrationPaymentType.Entity;
				if (((previousValue != value) 
							|| (this._RegistrationPaymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegistrationPaymentType.Entity = null;
						previousValue.SystemUsers.Remove(this);
					}
					this._RegistrationPaymentType.Entity = value;
					if ((value != null))
					{
						value.SystemUsers.Add(this);
						this._RegistrationPaymentTypeID = value.IID;
					}
					else
					{
						this._RegistrationPaymentTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegistrationPaymentType");
				}
			}
		}
		
		[Association(Name="SystemUser_SystemUser", Storage="_SystemUser1", ThisKey="LeftHandID", IsForeignKey=true)]
		public SystemUser SystemUser1
		{
			get
			{
				return this._SystemUser1.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser1.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser1.Entity = null;
						previousValue.SystemUsers.Remove(this);
					}
					this._SystemUser1.Entity = value;
					if ((value != null))
					{
						value.SystemUsers.Add(this);
						this._LeftHandID = value.IID;
					}
					else
					{
						this._LeftHandID = default(Nullable<long>);
					}
					this.SendPropertyChanged("SystemUser1");
				}
			}
		}
		
		[Association(Name="SystemUser_SystemUser1", Storage="_SystemUser2", ThisKey="RightHandID", IsForeignKey=true)]
		public SystemUser SystemUser2
		{
			get
			{
				return this._SystemUser2.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser2.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser2.Entity = null;
						previousValue.SystemUsers1.Remove(this);
					}
					this._SystemUser2.Entity = value;
					if ((value != null))
					{
						value.SystemUsers1.Add(this);
						this._RightHandID = value.IID;
					}
					else
					{
						this._RightHandID = default(Nullable<long>);
					}
					this.SendPropertyChanged("SystemUser2");
				}
			}
		}
		
		[Association(Name="SystemUser_SystemUser2", Storage="_SystemUser3", ThisKey="SponsorID", IsForeignKey=true)]
		public SystemUser SystemUser3
		{
			get
			{
				return this._SystemUser3.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser3.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser3.Entity = null;
						previousValue.SystemUsers2.Remove(this);
					}
					this._SystemUser3.Entity = value;
					if ((value != null))
					{
						value.SystemUsers2.Add(this);
						this._SponsorID = value.IID;
					}
					else
					{
						this._SponsorID = default(Nullable<long>);
					}
					this.SendPropertyChanged("SystemUser3");
				}
			}
		}
		
		[Association(Name="SystemUser_SystemUser3", Storage="_SystemUser4", ThisKey="ParentID", IsForeignKey=true)]
		public SystemUser SystemUser4
		{
			get
			{
				return this._SystemUser4.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser4.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser4.Entity = null;
						previousValue.SystemUsers3.Remove(this);
					}
					this._SystemUser4.Entity = value;
					if ((value != null))
					{
						value.SystemUsers3.Add(this);
						this._ParentID = value.IID;
					}
					else
					{
						this._ParentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("SystemUser4");
				}
			}
		}
		
		[Association(Name="UserKeyInfo_SystemUser", Storage="_UserKeyInfo", ThisKey="AthunticationID", IsForeignKey=true)]
		public UserKeyInfo UserKeyInfo
		{
			get
			{
				return this._UserKeyInfo.Entity;
			}
			set
			{
				UserKeyInfo previousValue = this._UserKeyInfo.Entity;
				if (((previousValue != value) 
							|| (this._UserKeyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserKeyInfo.Entity = null;
						previousValue.SystemUsers.Remove(this);
					}
					this._UserKeyInfo.Entity = value;
					if ((value != null))
					{
						value.SystemUsers.Add(this);
						this._AthunticationID = value.IID;
					}
					else
					{
						this._AthunticationID = default(Nullable<long>);
					}
					this.SendPropertyChanged("UserKeyInfo");
				}
			}
		}
		
		[Association(Name="UserType_SystemUser", Storage="_UserType", ThisKey="TypeID", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.SystemUsers.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.SystemUsers.Add(this);
						this._TypeID = value.IID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser1 = this;
		}
		
		private void detach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser1 = null;
		}
		
		private void attach_SystemUsers1(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser2 = this;
		}
		
		private void detach_SystemUsers1(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser2 = null;
		}
		
		private void attach_SystemUsers2(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser3 = this;
		}
		
		private void detach_SystemUsers2(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser3 = null;
		}
		
		private void attach_SystemUsers3(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser4 = this;
		}
		
		private void detach_SystemUsers3(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser4 = null;
		}
		
		private void attach_UserBalances(UserBalance entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_UserBalances(UserBalance entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
		
		private void attach_UserDailyLinkClicks(UserDailyLinkClick entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_UserDailyLinkClicks(UserDailyLinkClick entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
		
		private void attach_UserMoneyTransfers(UserMoneyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_UserMoneyTransfers(UserMoneyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
		
		private void attach_UserMoneyTransfers1(UserMoneyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser1 = this;
		}
		
		private void detach_UserMoneyTransfers1(UserMoneyTransfer entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser1 = null;
		}
		
		private void attach_UserPaidToCompanies(UserPaidToCompany entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_UserPaidToCompanies(UserPaidToCompany entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
		
		private void attach_UserTransactionHistories(UserTransactionHistory entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_UserTransactionHistories(UserTransactionHistory entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
		
		private void attach_UserTransactionHistories1(UserTransactionHistory entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser1 = this;
		}
		
		private void detach_UserTransactionHistories1(UserTransactionHistory entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser1 = null;
		}
		
		private void attach_UserWithdrawRequests(UserWithdrawRequest entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_UserWithdrawRequests(UserWithdrawRequest entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
	}
	
	[Table(Name="dbo.UserBalance")]
	public partial class UserBalance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IID;
		
		private long _UserID;
		
		private decimal _Amount;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(long value);
    partial void OnIIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public UserBalance()
		{
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Association(Name="SystemUser_UserBalance", Storage="_SystemUser", ThisKey="UserID", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.UserBalances.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.UserBalances.Add(this);
						this._UserID = value.IID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserDailyLinkClick")]
	public partial class UserDailyLinkClick : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IID;
		
		private long _UserID;
		
		private System.DateTime _Date;
		
		private int _ClickCount;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(long value);
    partial void OnIIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnClickCountChanging(int value);
    partial void OnClickCountChanged();
    #endregion
		
		public UserDailyLinkClick()
		{
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_ClickCount", DbType="Int NOT NULL")]
		public int ClickCount
		{
			get
			{
				return this._ClickCount;
			}
			set
			{
				if ((this._ClickCount != value))
				{
					this.OnClickCountChanging(value);
					this.SendPropertyChanging();
					this._ClickCount = value;
					this.SendPropertyChanged("ClickCount");
					this.OnClickCountChanged();
				}
			}
		}
		
		[Association(Name="SystemUser_UserDailyLinkClick", Storage="_SystemUser", ThisKey="UserID", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.UserDailyLinkClicks.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.UserDailyLinkClicks.Add(this);
						this._UserID = value.IID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserKeyInfo")]
	public partial class UserKeyInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IID;
		
		private System.Guid _UserKey;
		
		private decimal _Amount;
		
		private int _UserPaymetType;
		
		private System.DateTime _CreatedDate;
		
		private int _Status;
		
		private string _KeyTaker;
		
		private string _KeyTakerPhone;
		
		private EntitySet<SystemUser> _SystemUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(long value);
    partial void OnIIDChanged();
    partial void OnUserKeyChanging(System.Guid value);
    partial void OnUserKeyChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnUserPaymetTypeChanging(int value);
    partial void OnUserPaymetTypeChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnKeyTakerChanging(string value);
    partial void OnKeyTakerChanged();
    partial void OnKeyTakerPhoneChanging(string value);
    partial void OnKeyTakerPhoneChanged();
    #endregion
		
		public UserKeyInfo()
		{
			this._SystemUsers = new EntitySet<SystemUser>(new Action<SystemUser>(this.attach_SystemUsers), new Action<SystemUser>(this.detach_SystemUsers));
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserKey
		{
			get
			{
				return this._UserKey;
			}
			set
			{
				if ((this._UserKey != value))
				{
					this.OnUserKeyChanging(value);
					this.SendPropertyChanging();
					this._UserKey = value;
					this.SendPropertyChanged("UserKey");
					this.OnUserKeyChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_UserPaymetType", DbType="Int NOT NULL")]
		public int UserPaymetType
		{
			get
			{
				return this._UserPaymetType;
			}
			set
			{
				if ((this._UserPaymetType != value))
				{
					this.OnUserPaymetTypeChanging(value);
					this.SendPropertyChanging();
					this._UserPaymetType = value;
					this.SendPropertyChanged("UserPaymetType");
					this.OnUserPaymetTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_KeyTaker", DbType="NVarChar(100)")]
		public string KeyTaker
		{
			get
			{
				return this._KeyTaker;
			}
			set
			{
				if ((this._KeyTaker != value))
				{
					this.OnKeyTakerChanging(value);
					this.SendPropertyChanging();
					this._KeyTaker = value;
					this.SendPropertyChanged("KeyTaker");
					this.OnKeyTakerChanged();
				}
			}
		}
		
		[Column(Storage="_KeyTakerPhone", DbType="NVarChar(50)")]
		public string KeyTakerPhone
		{
			get
			{
				return this._KeyTakerPhone;
			}
			set
			{
				if ((this._KeyTakerPhone != value))
				{
					this.OnKeyTakerPhoneChanging(value);
					this.SendPropertyChanging();
					this._KeyTakerPhone = value;
					this.SendPropertyChanged("KeyTakerPhone");
					this.OnKeyTakerPhoneChanged();
				}
			}
		}
		
		[Association(Name="UserKeyInfo_SystemUser", Storage="_SystemUsers", OtherKey="AthunticationID")]
		public EntitySet<SystemUser> SystemUsers
		{
			get
			{
				return this._SystemUsers;
			}
			set
			{
				this._SystemUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.UserKeyInfo = this;
		}
		
		private void detach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.UserKeyInfo = null;
		}
	}
	
	[Table(Name="dbo.UserMoneyTransfer")]
	public partial class UserMoneyTransfer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IID;
		
		private long _FromUser;
		
		private long _ToUser;
		
		private decimal _Amount;
		
		private System.DateTime _Date;
		
		private System.Guid _TransactionKey;
		
		private EntityRef<SystemUser> _SystemUser;
		
		private EntityRef<SystemUser> _SystemUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(long value);
    partial void OnIIDChanged();
    partial void OnFromUserChanging(long value);
    partial void OnFromUserChanged();
    partial void OnToUserChanging(long value);
    partial void OnToUserChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTransactionKeyChanging(System.Guid value);
    partial void OnTransactionKeyChanged();
    #endregion
		
		public UserMoneyTransfer()
		{
			this._SystemUser = default(EntityRef<SystemUser>);
			this._SystemUser1 = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_FromUser", DbType="BigInt NOT NULL")]
		public long FromUser
		{
			get
			{
				return this._FromUser;
			}
			set
			{
				if ((this._FromUser != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromUserChanging(value);
					this.SendPropertyChanging();
					this._FromUser = value;
					this.SendPropertyChanged("FromUser");
					this.OnFromUserChanged();
				}
			}
		}
		
		[Column(Storage="_ToUser", DbType="BigInt NOT NULL")]
		public long ToUser
		{
			get
			{
				return this._ToUser;
			}
			set
			{
				if ((this._ToUser != value))
				{
					if (this._SystemUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToUserChanging(value);
					this.SendPropertyChanging();
					this._ToUser = value;
					this.SendPropertyChanged("ToUser");
					this.OnToUserChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_TransactionKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TransactionKey
		{
			get
			{
				return this._TransactionKey;
			}
			set
			{
				if ((this._TransactionKey != value))
				{
					this.OnTransactionKeyChanging(value);
					this.SendPropertyChanging();
					this._TransactionKey = value;
					this.SendPropertyChanged("TransactionKey");
					this.OnTransactionKeyChanged();
				}
			}
		}
		
		[Association(Name="SystemUser_UserMoneyTransfer", Storage="_SystemUser", ThisKey="FromUser", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.UserMoneyTransfers.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.UserMoneyTransfers.Add(this);
						this._FromUser = value.IID;
					}
					else
					{
						this._FromUser = default(long);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		[Association(Name="SystemUser_UserMoneyTransfer1", Storage="_SystemUser1", ThisKey="ToUser", IsForeignKey=true)]
		public SystemUser SystemUser1
		{
			get
			{
				return this._SystemUser1.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser1.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser1.Entity = null;
						previousValue.UserMoneyTransfers1.Remove(this);
					}
					this._SystemUser1.Entity = value;
					if ((value != null))
					{
						value.UserMoneyTransfers1.Add(this);
						this._ToUser = value.IID;
					}
					else
					{
						this._ToUser = default(long);
					}
					this.SendPropertyChanged("SystemUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserPaidToCompany")]
	public partial class UserPaidToCompany : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IID;
		
		private long _UserID;
		
		private long _CompanyID;
		
		private decimal _Amount;
		
		private System.DateTime _Date;
		
		private int _CompanyTransactionTypeID;
		
		private EntityRef<CompanyTransactionType> _CompanyTransactionType;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(long value);
    partial void OnIIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnCompanyIDChanging(long value);
    partial void OnCompanyIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCompanyTransactionTypeIDChanging(int value);
    partial void OnCompanyTransactionTypeIDChanged();
    #endregion
		
		public UserPaidToCompany()
		{
			this._CompanyTransactionType = default(EntityRef<CompanyTransactionType>);
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyID", DbType="BigInt NOT NULL")]
		public long CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_CompanyTransactionTypeID", DbType="Int NOT NULL")]
		public int CompanyTransactionTypeID
		{
			get
			{
				return this._CompanyTransactionTypeID;
			}
			set
			{
				if ((this._CompanyTransactionTypeID != value))
				{
					if (this._CompanyTransactionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyTransactionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyTransactionTypeID = value;
					this.SendPropertyChanged("CompanyTransactionTypeID");
					this.OnCompanyTransactionTypeIDChanged();
				}
			}
		}
		
		[Association(Name="CompanyTransactionType_UserPaidToCompany", Storage="_CompanyTransactionType", ThisKey="CompanyTransactionTypeID", IsForeignKey=true)]
		public CompanyTransactionType CompanyTransactionType
		{
			get
			{
				return this._CompanyTransactionType.Entity;
			}
			set
			{
				CompanyTransactionType previousValue = this._CompanyTransactionType.Entity;
				if (((previousValue != value) 
							|| (this._CompanyTransactionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyTransactionType.Entity = null;
						previousValue.UserPaidToCompanies.Remove(this);
					}
					this._CompanyTransactionType.Entity = value;
					if ((value != null))
					{
						value.UserPaidToCompanies.Add(this);
						this._CompanyTransactionTypeID = value.IID;
					}
					else
					{
						this._CompanyTransactionTypeID = default(int);
					}
					this.SendPropertyChanged("CompanyTransactionType");
				}
			}
		}
		
		[Association(Name="SystemUser_UserPaidToCompany", Storage="_SystemUser", ThisKey="UserID", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.UserPaidToCompanies.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.UserPaidToCompanies.Add(this);
						this._UserID = value.IID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserTransactionHistory")]
	public partial class UserTransactionHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IID;
		
		private long _UserID;
		
		private int _UserTransactionTypeID;
		
		private decimal _Amount;
		
		private System.DateTime _Date;
		
		private string _Description;
		
		private decimal _SponsorAmount;
		
		private decimal _TAXAmount;
		
		private decimal _ActualAmount;
		
		private System.Guid _TransactionKey;
		
		private int _Status;
		
		private System.Nullable<long> _FromUser;
		
		private EntityRef<SystemUser> _SystemUser;
		
		private EntityRef<SystemUser> _SystemUser1;
		
		private EntityRef<UserTransactionType> _UserTransactionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(long value);
    partial void OnIIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnUserTransactionTypeIDChanging(int value);
    partial void OnUserTransactionTypeIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSponsorAmountChanging(decimal value);
    partial void OnSponsorAmountChanged();
    partial void OnTAXAmountChanging(decimal value);
    partial void OnTAXAmountChanged();
    partial void OnActualAmountChanging(decimal value);
    partial void OnActualAmountChanged();
    partial void OnTransactionKeyChanging(System.Guid value);
    partial void OnTransactionKeyChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnFromUserChanging(System.Nullable<long> value);
    partial void OnFromUserChanged();
    #endregion
		
		public UserTransactionHistory()
		{
			this._SystemUser = default(EntityRef<SystemUser>);
			this._SystemUser1 = default(EntityRef<SystemUser>);
			this._UserTransactionType = default(EntityRef<UserTransactionType>);
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserTransactionTypeID", DbType="Int NOT NULL")]
		public int UserTransactionTypeID
		{
			get
			{
				return this._UserTransactionTypeID;
			}
			set
			{
				if ((this._UserTransactionTypeID != value))
				{
					if (this._UserTransactionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTransactionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._UserTransactionTypeID = value;
					this.SendPropertyChanged("UserTransactionTypeID");
					this.OnUserTransactionTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_SponsorAmount", DbType="Money NOT NULL")]
		public decimal SponsorAmount
		{
			get
			{
				return this._SponsorAmount;
			}
			set
			{
				if ((this._SponsorAmount != value))
				{
					this.OnSponsorAmountChanging(value);
					this.SendPropertyChanging();
					this._SponsorAmount = value;
					this.SendPropertyChanged("SponsorAmount");
					this.OnSponsorAmountChanged();
				}
			}
		}
		
		[Column(Storage="_TAXAmount", DbType="Money NOT NULL")]
		public decimal TAXAmount
		{
			get
			{
				return this._TAXAmount;
			}
			set
			{
				if ((this._TAXAmount != value))
				{
					this.OnTAXAmountChanging(value);
					this.SendPropertyChanging();
					this._TAXAmount = value;
					this.SendPropertyChanged("TAXAmount");
					this.OnTAXAmountChanged();
				}
			}
		}
		
		[Column(Storage="_ActualAmount", DbType="Money NOT NULL")]
		public decimal ActualAmount
		{
			get
			{
				return this._ActualAmount;
			}
			set
			{
				if ((this._ActualAmount != value))
				{
					this.OnActualAmountChanging(value);
					this.SendPropertyChanging();
					this._ActualAmount = value;
					this.SendPropertyChanged("ActualAmount");
					this.OnActualAmountChanged();
				}
			}
		}
		
		[Column(Storage="_TransactionKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TransactionKey
		{
			get
			{
				return this._TransactionKey;
			}
			set
			{
				if ((this._TransactionKey != value))
				{
					this.OnTransactionKeyChanging(value);
					this.SendPropertyChanging();
					this._TransactionKey = value;
					this.SendPropertyChanged("TransactionKey");
					this.OnTransactionKeyChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_FromUser", DbType="BigInt")]
		public System.Nullable<long> FromUser
		{
			get
			{
				return this._FromUser;
			}
			set
			{
				if ((this._FromUser != value))
				{
					if (this._SystemUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromUserChanging(value);
					this.SendPropertyChanging();
					this._FromUser = value;
					this.SendPropertyChanged("FromUser");
					this.OnFromUserChanged();
				}
			}
		}
		
		[Association(Name="SystemUser_UserTransactionHistory", Storage="_SystemUser", ThisKey="UserID", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.UserTransactionHistories.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.UserTransactionHistories.Add(this);
						this._UserID = value.IID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		[Association(Name="SystemUser_UserTransactionHistory1", Storage="_SystemUser1", ThisKey="FromUser", IsForeignKey=true)]
		public SystemUser SystemUser1
		{
			get
			{
				return this._SystemUser1.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser1.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser1.Entity = null;
						previousValue.UserTransactionHistories1.Remove(this);
					}
					this._SystemUser1.Entity = value;
					if ((value != null))
					{
						value.UserTransactionHistories1.Add(this);
						this._FromUser = value.IID;
					}
					else
					{
						this._FromUser = default(Nullable<long>);
					}
					this.SendPropertyChanged("SystemUser1");
				}
			}
		}
		
		[Association(Name="UserTransactionType_UserTransactionHistory", Storage="_UserTransactionType", ThisKey="UserTransactionTypeID", IsForeignKey=true)]
		public UserTransactionType UserTransactionType
		{
			get
			{
				return this._UserTransactionType.Entity;
			}
			set
			{
				UserTransactionType previousValue = this._UserTransactionType.Entity;
				if (((previousValue != value) 
							|| (this._UserTransactionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTransactionType.Entity = null;
						previousValue.UserTransactionHistories.Remove(this);
					}
					this._UserTransactionType.Entity = value;
					if ((value != null))
					{
						value.UserTransactionHistories.Add(this);
						this._UserTransactionTypeID = value.IID;
					}
					else
					{
						this._UserTransactionTypeID = default(int);
					}
					this.SendPropertyChanged("UserTransactionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserTransactionType")]
	public partial class UserTransactionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IID;
		
		private string _Name;
		
		private EntitySet<UserTransactionHistory> _UserTransactionHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(int value);
    partial void OnIIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public UserTransactionType()
		{
			this._UserTransactionHistories = new EntitySet<UserTransactionHistory>(new Action<UserTransactionHistory>(this.attach_UserTransactionHistories), new Action<UserTransactionHistory>(this.detach_UserTransactionHistories));
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="UserTransactionType_UserTransactionHistory", Storage="_UserTransactionHistories", OtherKey="UserTransactionTypeID")]
		public EntitySet<UserTransactionHistory> UserTransactionHistories
		{
			get
			{
				return this._UserTransactionHistories;
			}
			set
			{
				this._UserTransactionHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTransactionHistories(UserTransactionHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserTransactionType = this;
		}
		
		private void detach_UserTransactionHistories(UserTransactionHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserTransactionType = null;
		}
	}
	
	[Table(Name="dbo.UserType")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IID;
		
		private string _Name;
		
		private EntitySet<SystemUser> _SystemUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(int value);
    partial void OnIIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public UserType()
		{
			this._SystemUsers = new EntitySet<SystemUser>(new Action<SystemUser>(this.attach_SystemUsers), new Action<SystemUser>(this.detach_SystemUsers));
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="UserType_SystemUser", Storage="_SystemUsers", OtherKey="TypeID")]
		public EntitySet<SystemUser> SystemUsers
		{
			get
			{
				return this._SystemUsers;
			}
			set
			{
				this._SystemUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
	
	[Table(Name="dbo.Advertise")]
	public partial class Advertise : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IID;
		
		private string _Name;
		
		private string _Url;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(long value);
    partial void OnIIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public Advertise()
		{
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserWithdrawRequest")]
	public partial class UserWithdrawRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IID;
		
		private long _UserID;
		
		private System.Guid _TransactionKey;
		
		private int _TransactionStatus;
		
		private System.DateTime _RequestDate;
		
		private System.Nullable<System.DateTime> _ComplitionDate;
		
		private decimal _Amount;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIIDChanging(long value);
    partial void OnIIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnTransactionKeyChanging(System.Guid value);
    partial void OnTransactionKeyChanged();
    partial void OnTransactionStatusChanging(int value);
    partial void OnTransactionStatusChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    partial void OnComplitionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnComplitionDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public UserWithdrawRequest()
		{
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[Column(Storage="_IID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IID
		{
			get
			{
				return this._IID;
			}
			set
			{
				if ((this._IID != value))
				{
					this.OnIIDChanging(value);
					this.SendPropertyChanging();
					this._IID = value;
					this.SendPropertyChanged("IID");
					this.OnIIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_TransactionKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TransactionKey
		{
			get
			{
				return this._TransactionKey;
			}
			set
			{
				if ((this._TransactionKey != value))
				{
					this.OnTransactionKeyChanging(value);
					this.SendPropertyChanging();
					this._TransactionKey = value;
					this.SendPropertyChanged("TransactionKey");
					this.OnTransactionKeyChanged();
				}
			}
		}
		
		[Column(Storage="_TransactionStatus", DbType="Int NOT NULL")]
		public int TransactionStatus
		{
			get
			{
				return this._TransactionStatus;
			}
			set
			{
				if ((this._TransactionStatus != value))
				{
					this.OnTransactionStatusChanging(value);
					this.SendPropertyChanging();
					this._TransactionStatus = value;
					this.SendPropertyChanged("TransactionStatus");
					this.OnTransactionStatusChanged();
				}
			}
		}
		
		[Column(Storage="_RequestDate", DbType="DateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[Column(Storage="_ComplitionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ComplitionDate
		{
			get
			{
				return this._ComplitionDate;
			}
			set
			{
				if ((this._ComplitionDate != value))
				{
					this.OnComplitionDateChanging(value);
					this.SendPropertyChanging();
					this._ComplitionDate = value;
					this.SendPropertyChanged("ComplitionDate");
					this.OnComplitionDateChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Association(Name="SystemUser_UserWithdrawRequest", Storage="_SystemUser", ThisKey="UserID", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.UserWithdrawRequests.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.UserWithdrawRequests.Add(this);
						this._UserID = value.IID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class UserDailyIncomeResult
	{
		
		private string _UserName;
		
		private string _FullName;
		
		private System.DateTime _Date;
		
		private string _Description;
		
		private decimal _SponsorAmount;
		
		private decimal _TAXAmount;
		
		private decimal _ActualAmount;
		
		private System.Guid _TransactionKey;
		
		public UserDailyIncomeResult()
		{
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_SponsorAmount", DbType="Money NOT NULL")]
		public decimal SponsorAmount
		{
			get
			{
				return this._SponsorAmount;
			}
			set
			{
				if ((this._SponsorAmount != value))
				{
					this._SponsorAmount = value;
				}
			}
		}
		
		[Column(Storage="_TAXAmount", DbType="Money NOT NULL")]
		public decimal TAXAmount
		{
			get
			{
				return this._TAXAmount;
			}
			set
			{
				if ((this._TAXAmount != value))
				{
					this._TAXAmount = value;
				}
			}
		}
		
		[Column(Storage="_ActualAmount", DbType="Money NOT NULL")]
		public decimal ActualAmount
		{
			get
			{
				return this._ActualAmount;
			}
			set
			{
				if ((this._ActualAmount != value))
				{
					this._ActualAmount = value;
				}
			}
		}
		
		[Column(Storage="_TransactionKey", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TransactionKey
		{
			get
			{
				return this._TransactionKey;
			}
			set
			{
				if ((this._TransactionKey != value))
				{
					this._TransactionKey = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
